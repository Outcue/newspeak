Newspeak3
'OrthogonalSynchronization'
class Versioning usingPlatform: platform clientModule: aClientModule clientServerModule: aClientServerModule= (
|
	List = platform collections List.
	Map = platform collections Map.
	Set = platform collections Set.
	clientModule = aClientModule.
	clientServerModule = aClientServerModule.
	
|
) (
class AAVersionsDiffer from: aVersion to: anotherVersion isMerge: merging = (
|
	sourceVersion = aVersion.
	targetVersion = anotherVersion.
	isMerge = merging. 
	commonAncestor
	changeRecords
	newObjectDefinitions
	
|
) (
class VersionsDiffResult changeRecords: aCollectionOfChangeRecords newObjects: aCollectionOfNewObjects = (
|
	public changeRecords = aCollectionOfChangeRecords.
	public newObjects=  aCollectionOfNewObjects.
|
) (
) : (
)
computeChangeFor: anObjectVersion = (
	| history |
	
	
		commonAncestor 
			versionById: anObjectVersion principalId 
			ifFound: [ :foundVersion  |	
		
					history:: ObjectVersionHistory from: foundVersion to: anObjectVersion. 
					changeRecords add:  (history resumedChangeRecord asObjectChangeRecordForId: anObjectVersion principalId).
		
			]
			ifNotFound: [
				history:: ObjectVersionHistory completeFor: anObjectVersion.
				newObjectDefinitions add: (clientServerModule ObjectDefinitionWithIdentification 
													id: anObjectVersion principalId 
													definition: history resumedChangeRecord).
		
			].
		
)
public value = (
	|  versionsByIdInSource versionsByIdInTarget objectIdsToInclude   |


	newObjectDefinitions:: List new.
	changeRecords:: List new.

	commonAncestor:: (CommonAncestorFinder for: sourceVersion and: targetVersion) value.


	versionsByIdInSource:: sourceVersion newVersionsByIdUpTo:  commonAncestor.	
	versionsByIdInTarget:: targetVersion newVersionsByIdUpTo:  commonAncestor.
	
	objectIdsToInclude:: versionsByIdInSource keys difference: versionsByIdInTarget keys.
	
	objectIdsToInclude do: [ :each | 
		| version history |
		version:: versionsByIdInSource at: each.
		computeChangeFor: version.
	].

	isMerge ifTrue: [

		sourceVersion newVersionsDo: [ :each |
			changeRecords add: each asChangeRecord.		
		].	
	].

	^ VersionsDiffResult 
				changeRecords: changeRecords  
				newObjects: newObjectDefinitions 

)
public valueGeneral = (
	|  versionsByIdInSource newObjectIds newVersions versionsByIdInTarget      |


	commonAncestor:: (CommonAncestorFinder for: sourceVersion and: targetVersion) value.

	changeRecords:: List new.
	sourceVersion newVersionsDo: [ :each |
		changeRecords add: each asChangeRecord.		
	].
	
	
	versionsByIdInSource:: sourceVersion newVersionsByIdUpTo:  commonAncestor.	
	versionsByIdInTarget:: targetVersion newVersionsByIdUpTo:  commonAncestor.
	
	newObjectIds:: versionsByIdInSource keys difference: versionsByIdInTarget keys.
	
	newObjectDefinitions:: List new.
	newObjectIds do: [ :each | 
		| version history |
		version:: versionsByIdInSource at: each.
		computeChangeFor: version.
		 

	].

	^ VersionsDiffResult 
				changeRecords: changeRecords  
				newObjects: newObjectDefinitions 
	

)
) : (
)
public class CommonAncestorFinder for: aVersion and: anotherVersion = (
|
	v1 = aVersion. 
	v2=  anotherVersion.
|
) (
commonAncestorsFor: elements = (
	^ intersectionOfSets: ( elements collect: [ :x  |  x withAllAncestors ]).
)
intersectionOfSets: aCollectionOfSets = (
	^ aCollectionOfSets inject:  aCollectionOfSets anyOne into: [ :int :each | int intersection: each ].
)
sameElementsIn: col  = (
	| anyOne |
	anyOne:: col anyOne.
	^ col allSatisfy: [:x | x ==  anyOne ].
)
public value = (
	^ valueForNodes: {v1 . v2}
)
valueForNodes:  elements = (
	|  nonCommonAncestors commonAncestors frontierCommonAncestors res    |
	
	(sameElementsIn: elements) ifTrue: [ ^ elements anyOne] .
	
	commonAncestors:: commonAncestorsFor: elements.
	
	nonCommonAncestors::  Set new .
	elements do: [ :x |  nonCommonAncestors addAll: (x withAllAncestors) ].
	nonCommonAncestors::  nonCommonAncestors reject: [:x  | commonAncestors includes: x ].
	
	frontierCommonAncestors::  commonAncestors select:
				 [ :eachCommon |
						 nonCommonAncestors anySatisfy: [:eachNonCommon | eachNonCommon isChildOf: eachCommon    ]   ].
	
	(frontierCommonAncestors size = 1) 
		ifTrue: [ ^ frontierCommonAncestors first].	

	(* more than 1 parent*)
	res:: ((commonAncestorsFor: frontierCommonAncestors)  asSortedList: [:x1 :x2 | x1 distanceToRoot >=  x2 distanceToRoot   ]) first .

	^ res

)
) : (
)
class CompoundVersionId principal: aPrincipalId version: aVersionId  = (
|
	principalId = aPrincipalId.
	versionId = aVersionId.
|
) (
) : (
)
public class DefinitionsToObjectVersionsMaterializer objectStore: aStore = ObjectsMaterializer objectStore: aStore (
|

|
) (
createInstanceFrom:   definitionWithId  = (
	| initialVersion  newVersion definition |
	
	initialVersion:: InitialVersion id: objectStore newGuid.

	definition:: definitionWithId definition.
	
	newVersion::  ObjectVersion withParent: initialVersion versionedData: nil.
	

(* 	definition enclosingObjectReference: (definition enclosingObjectReference asGlobalReferenceUsing: objectStore).  *)

	^ newVersion


)
fillNewInstance: anInstance fromDefinition: aDefinition = (

	anInstance versionedData: (aDefinition  asGlobalReferenceUsing: objectStore).
	
)
) : (
)
class IdGenerator seed: aSeed nextIdBlock: aBlock = (
|
	lastValue ::= aSeed.
	nextIdBlock = aBlock.
|
) (
public newId = (
	lastValue::  nextIdBlock value: lastValue.
	^ lastValue.
)
) : (
)
public class InitialVersion id:  anId    = (
|
	
	public versionId = 0.
	public principalId	= anId.
	idGenerator = IdGenerator seed: 0 nextIdBlock: [:x | x + 1].
	public childVersions = List new.

 |
) (
public allAncestors = (
	^ Set new
)
public changeRecordsUpTo: x = (
	 ^ List new.
)
public distanceToRoot = (
	^ 0
)
public generateNextVersionId  = (
	^ idGenerator newId.
)
public hasChildVersionWithId: anId = (
	^ childVersions anySatisfy: [:x | x versionId = anId] 
)
public initialVersion  = (
	^ self.
)
public isParentOf: aVersion  = (
	^ childVersions first == aVersion
)
public newVersionsByIdUpTo: aVersion  = (
	^ Map new
)
public newVersionsDo: aBlock = (

)
public registerChild: aVersion = (
	childVersions add: aVersion.
)
public singleChild = (
	^ childVersions anyOne
)
public versionById: anId ifFound: foundBlock ifNotFound: notFoundBlock  = ( 
	^ notFoundBlock value
)
public versionById: anId ifNotFound: notFoundBlock  = (
	^ notFoundBlock value
)
public versionsUpTo: anotherVersion = (
	^ (self = anotherVersion) 
					ifTrue: [ { self } ]
					ifFalse: [  error  ]  

)
public withAllAncestors = (
	^ Set with: self.
)
) : (
)
class ObjectVersion withParents: parentsCollection versionedData: dataToVersion  = Version withParents: parentsCollection (
|
	public versionedData ::= dataToVersion.
|
) (
public asChangeRecord = (
	^ ObjectChangeRecord 
		for: (ObjectReference toObjectIdentifiedWith:  principalId)
		withChange: versionedData.
)
public changeRecordsUpTo: aVersion = (

	| records |

	(aVersion == self) ifTrue: [ ^ List new ].

	isMergeNode ifTrue: [  ^ List newFrom:  versionedData ]. 
	
	records:: List withAll:  (singleParentVersion changeRecordsUpTo: aVersion).
	records add: versionedData.

	^ records.

)
) : (
public  withParent: aParent  versionedData: dataToVersion = (
	^ self  withParents: {aParent} versionedData: dataToVersion.
)
)
class ObjectVersionHistory from: startNode to: endNode = (
|
	start ::=  startNode.
	end =  endNode.
|
	initializeStart. 
) (
initializeStart = (
	start ifNil: [
		start:: end initialVersion.	 
	]
)
public resumedChangeRecord = (
	| records result | 
	records:: end changeRecordsUpTo: start.
	
	result:: records first.
	records allButFirst do: [ :each |  result:: result appliedWithChange: each.   ]. 
	^ result

)
) : (
public completeFor: aVersion = (
	^ self from: nil to: aVersion.
)
)
class ObjectVersionsMerger between: aVersion and: anotherVersion = (
|
	version1 = aVersion.
	version2 = anotherVersion.
|
) (
compactRecords: recordsList  = (
	| result |

	result:: recordsList first.
	recordsList allButFirst do: [ :each |  result:: result applyRecord: each.   ]. 
	^ result
)
mergeRecordsBetween: aChangeRecord and: anotherChangeRecord = (
	| changesDictionary |
	
	changesDictionary:: newMapFrom: aChangeRecord changes.
	
	anotherChangeRecord changes keysAndValuesDo: [ :key :val | 
		changesDictionary at: key ifAbsentPut: [val].
	].
	 
	^ RegularObjectChange withChanges: changesDictionary.
)
public value = (
	| commonAncestor changeRecords1 changeRecords2 mergedData |
	commonAncestor:: (CommonAncestorFinder for: version1 and: version2) value.
	
	changeRecords1:: compactRecords: (version1 changeRecordsUpTo: commonAncestor).	
	changeRecords2:: compactRecords: (version2 changeRecordsUpTo:  commonAncestor).

	mergedData:: mergeRecordsBetween: changeRecords1 and: changeRecords2. 
	^ ObjectVersion withParents: { version1 . version2 } versionedData: mergedData.

)
) : (
)
class Store name: aName identifiedBy: anId root: aRootObject  = (
|
	public name = aName.
	initialVersion = InitialVersion id: anId.
	versionsById = Map new.
	objectsIdGenerator =  IdGenerator seed: 0 nextIdBlock: [:x | x + 1].
	public anchorVersionId
	rootPrincipalId
|
	registerVersion: initialVersion.
	defineAsAnchor: initialVersion.
	installRoot: aRootObject.
) (
anchorVersion  = (
	^  versionIdentifiedBy: anchorVersionId.
)
commonAncestorFor: versionsCollection = (
	| versionsAsSet newSet|
	versionsAsSet:: versionsCollection asSet.
	
	(versionsAsSet size =1) 
		ifTrue: [ ^ versionsAsSet anyOne ].
	
	
	newSet:: Set new.
	versionsAsSet do: [:each | newSet addAll: each parentVersions ].
	^ commonAncestorFor: versionsAsSet.
		 
)
computeChangesFrom: sourceVersion to: targetVersion mappingLocalsWith: localToGlobalIds  = (
	
	| versionsToConsider changeRecords newObjectDefinitions result |

	 versionsToConsider:: (sourceVersion versionsUpTo: targetVersion) allButFirst.

	changeRecords:: List new.
	newObjectDefinitions:: List new.
		
	versionsToConsider do: [ :eachStoreVersion |
		
		eachStoreVersion newVersionsDo: [ :eachVersion |
			| data |
			data:: eachVersion  versionedData.
			(data isKindOfObjectChange)  
				ifTrue: [ 
					changeRecords add:  eachVersion asChangeRecord ].
			
			(data isKindOfObjectDefinition or: [data isKindOfArrayDefinition])  
				ifTrue: [ newObjectDefinitions add: (clientServerModule ObjectDefinitionWithIdentification 
													id: eachVersion principalId 
													definition: data)  										].
		].
	].	


	result:: ServerToClientChangeLog 
				mappingIdsWith: localToGlobalIds 
				changeRecords:  changeRecords  
				newObjects:  newObjectDefinitions 
				versionId: anchorVersionId.  
	
	result rootObjectReference: (clientServerModule ObjectReference toObjectIdentifiedWith: rootPrincipalId).
	^ result.

)
computeMergeChangesFrom: sourceVersion to: targetVersion mappingLocalsWith: localToGlobalIds isMerge: isMergeA  = (

	|  diff   result |

	diff:: (AAVersionsDiffer from: sourceVersion to: targetVersion isMerge: isMergeA) value.

	result:: ServerToClientChangeLog 
				mappingIdsWith: localToGlobalIds 
				changeRecords: diff changeRecords  
				newObjects: diff newObjects 
				versionId: anchorVersionId.  
	
	result rootObjectReference: (clientServerModule ObjectReference toObjectIdentifiedWith: rootPrincipalId).
	^ result.

)
createClientUpdaterFor: aStoreVersion = (
	^ ClientUpdater materializingObjectsWith: [ :aStore |  DefinitionsToObjectVersionsMaterializer objectStore: aStore  ] forContext: aStoreVersion endPoint: self.
)
public createNewInitialObjectVersion = (
	 ^ InitialVersion id: generateNextGuid.
)
createObjectDefinitionFor: anObject enclosingObejctReference: aReference  = (

	| classReference |
	(*^  clientServerModule ObjectDefinition classNamed: (clientServerModule classNameFor: anObject)  enclosingObjectReference: aReference withContents: Map new. *)	

	classReference:: clientServerModule ObjectReferenceByMessageSend receiverReference: aReference selector: (clientServerModule classNameFor: anObject).
	
	^ clientServerModule ObjectDefinition classReference: classReference  withContents: Map new. 	


)
public defineAsAnchor: aVersion = (
	anchorVersionId:: aVersion versionId.
)
public generateNextGuid = (
	^ objectsIdGenerator newId.
)
public id = (
	^ initialVersion principalId.
)
public initialVersionId = (
	^ initialVersion versionId.
)
installRoot: aRootObject = (
	| enclosingObject rootInitialVersion enclosingModuleInitialVersion rootObjectDefinition enclosingModuleObjectDefinition  newStoreVersion |

	enclosingObject:: clientServerModule enclosingObjectForClassOf: aRootObject.

	rootInitialVersion::  createNewInitialObjectVersion.
	enclosingModuleInitialVersion::  createNewInitialObjectVersion.
	
	enclosingModuleObjectDefinition::  createObjectDefinitionFor: enclosingObject enclosingObejctReference: (clientServerModule UnidentifiableObject for: nil).
	
	rootObjectDefinition::  createObjectDefinitionFor: aRootObject enclosingObejctReference: (clientServerModule ObjectReference toObjectIdentifiedWith: enclosingModuleInitialVersion principalId).
		

	newStoreVersion:  newVersionFromAnchor.
	newStoreVersion addObjectVersionWithParent: enclosingModuleInitialVersion versionedData: enclosingModuleObjectDefinition.
	newStoreVersion addObjectVersionWithParent: rootInitialVersion versionedData: rootObjectDefinition.
	
	
	defineAsAnchor: newStoreVersion.
	rootPrincipalId:: rootInitialVersion principalId.

)
public isVersion: aVersionId childOf: aParentVersionId   = (
	^ (versionIdentifiedBy: aParentVersionId) hasChildVersionWithId: aVersionId.
)
public isVersion: aParentVersionId parentOf: aVersionId   = (
	^ (versionIdentifiedBy: aParentVersionId) hasChildVersionWithId:  aVersionId.
)
merge: aVersion with: anotherVersion = (
	^ (StoreVersionsMerger between: aVersion and: anotherVersion) value.
)
public newVersionFromAnchor = (
	| newVersion |
	newVersion:: StoreVersion withParent: anchorVersion.
	registerVersion: newVersion.
	
	^ newVersion
)
processNewVersion: aVersion = (

	(anchorVersion  isParentOf: aVersion)  
		ifTrue: [  defineAsAnchor: aVersion.  ]
		ifFalse: [
					| mergedVersion |
				
					mergedVersion:: merge: anchorVersion with: aVersion.
					registerVersion: mergedVersion.
					defineAsAnchor: mergedVersion. 		 ].
)
public register: changeLog asChildOfVersionIdentifiedBy: anId  = (
	| parentVersion newVersion |
	parentVersion:: versionIdentifiedBy: anId.
	
	newVersion:: StoreVersion withParent: parentVersion.
	registerVersion: newVersion.
	^ newVersion versionId.
)
registerNewVersionFrom: aChangeLogFromClient 	ifNewVersionCreated:  newVersionCreatedBlock ifNone: noneBlock = (
	| previousClientVersion newStoreVersion updater localToGlobalIds |
	
	previousClientVersion:: versionIdentifiedBy: aChangeLogFromClient versionId.	
	
	aChangeLogFromClient hasNoChanges 
							ifTrue: [ ^  noneBlock value: previousClientVersion ] .

	newStoreVersion:: StoreVersion withParent: previousClientVersion.
	registerVersion: newStoreVersion.
	updater:: createClientUpdaterFor: newStoreVersion.
	localToGlobalIds::  updater updateServerFrom: aChangeLogFromClient.
	newVersionCreatedBlock value: newStoreVersion value: localToGlobalIds.
)
registerVersion: aVersion  = (
	versionsById at: aVersion versionId  put: aVersion.
)
public retrieveCurrentState = (
(*	^ computeChangesFrom: anchorVersion  to: initialVersion mappingLocalsWith: Map new.  *)
	
	 ^ computeMergeChangesFrom: anchorVersion  to:  initialVersion mappingLocalsWith: Map new isMerge: false.	 
	
)
public synchronizeWith: aChangeLogFromClient = (
	|  newClientVersion updater localToGlobalIds   |

	localToGlobalIds:: Map new.
	
	registerNewVersionFrom: aChangeLogFromClient 
					ifNewVersionCreated: [ :newVersion :localToGlobalMap | 
							localToGlobalIds:: localToGlobalMap.
							newClientVersion:: newVersion.
							processNewVersion: newVersion.
		
					] 
					ifNone: [ :v | newClientVersion:: v.].
		
	 ^ computeMergeChangesFrom: anchorVersion  to:  newClientVersion mappingLocalsWith: localToGlobalIds isMerge: anchorVersion isMergeNode.



)
public versionIdentifiedBy: aVersionId   = (
	^ versionsById at: aVersionId.
	
)
) : (
)
public class StoreVersion withParents: parents  newVersions: aVersionsCollection deletedIds: deletedIds = Version withParents: parents (
|
	newVersionsById = Map new.
	deletedVersionIds = Set withAll: deletedIds.
|
	initializeVersionsMapFrom: aVersionsCollection. 
) (
public addObjectVersion: aVersion   = (
	newVersionsById at: aVersion principalId put: aVersion.
)
public addObjectVersionWithParent: aParentVersion versionedData: dataToVersion = (
	| newVersion |

	 newVersion:: ObjectVersion withParent: aParentVersion versionedData: dataToVersion.
	addObjectVersion: newVersion.
	^ newVersion
)
initializeVersionsMapFrom: aVersionsCollection = (
	newVersionsById = Map new.
	aVersionsCollection do: [ :each |  addObjectVersion: each ]
	
)
public newVersionsByIdUpTo: aVersion  = (
	| dict |
	
	(aVersion == self) ifTrue: [ ^ Map new ].
	
	dict:: newMapFrom: newVersionsById.
	
	parentVersions do: [ :each | 
		| parentNewVersions |
		parentNewVersions:: each newVersionsByIdUpTo: aVersion.
		parentNewVersions keysAndValuesDo: [ :key :value  | dict at: key ifAbsentPut: [value].  ].
	].
	
	^ dict

)
public newVersionsDo: aBlock = (
	^ newVersionsById values do: aBlock.
)
public objectById: anIdentifier ifNotFound: notFoundBlock = (
	^ versionById: anIdentifier ifNotFound: notFoundBlock.		
)
public printOn: aStream = (
	aStream nextPutAll: 'StoreVersion '.
	aStream nextPutAll: fullIdentificationAsString.
)
public versionById: anId = (
	^versionById: anId ifNotFound: [error].
)
public versionById: anId ifFound: foundBlock ifNotFound: notFoundBlock  = (
	| v |  
	v:: versionById: anId ifNotFound: [ ^ notFoundBlock value ].
	foundBlock value: v.
)
public versionById: anId ifNotFound: notFoundBlock  = (
	^ newVersionsById at: anId ifAbsent: [ singleParentVersion versionById: anId ifNotFound: notFoundBlock ].
)
) : (
public withParent: aParent  = (
	^ self withParents: {aParent} newVersions: {} deletedIds: {}.
)
public withParents: parents  = (
	^ self withParents: parents newVersions: {} deletedIds: {}.
)
)
class StoreVersionsMerger between: aVersion and: anotherVersion = (
|
	version1 = aVersion.
	version2  =anotherVersion.
|
) (
mergeObjectVersionBetween: v1 and: v2  = (
	^  (ObjectVersionsMerger between: v1 and: v2) value.
)
public value = (
	| commonAncestor versionsById1 versionsById2 idsToMerge  newObjectVersions |

	commonAncestor:: (CommonAncestorFinder for: version1 and: version2) value.
	
	versionsById1:: version1 newVersionsByIdUpTo:  commonAncestor.	
	versionsById2:: version2 newVersionsByIdUpTo:  commonAncestor.
	
		
	idsToMerge:: versionsById1 keys intersection: versionsById2 keys.
	
	newObjectVersions:: Set new.
	
	idsToMerge do: [ :each |
		| v1 v2|
		v1:: versionsById1 at: each.
		v2:: versionsById2 at: each.
		
		(v1 == v2) ifFalse: [
			 | mergedVersion |
			mergedVersion:: mergeObjectVersionBetween: v1 and: v2.
			newObjectVersions add: mergedVersion.
		].
	].	

	^  StoreVersion withParents: { version1 . version2 }  newVersions:  newObjectVersions deletedIds:  {}.

)
) : (
)
class Version withParents: parents  = (
|
	public versionId = parents anyOne initialVersion generateNextVersionId.
	public parentVersions = List withAll: parents.
	childVersions = List new.
|
	parents do: [ :aParent |  aParent registerChild: self] .
) (
public allAncestors = (
	| ancestors |
	ancestors:: Set withAll: parentVersions.
	parentVersions do: [:x | ancestors addAll: x allAncestors. ].
	^ ancestors.
)
assertSingleParent = (
	hasSingleParent ifFalse: [ error].
)
public createChildVersionIn: aUnitOfWork  = (
	error.
)
public distanceToRoot = (
	^ 1 + (parentVersions collect: [ :x | x distanceToRoot]) min.
)
fullIdentificationAsString = (
	principalId asString , '-', versionId asString. 	
)
public hasChildVersionWithId: anId = (
	^ childVersions anySatisfy: [:x | x versionId = anId] 
)
public hasSingleParent  = (
	^ parentVersions size = 1.
)
public initialVersion = (
	^ parentVersions anyOne initialVersion.
)
public isChildOf: aVersion  = (
	^ aVersion isParentOf: self.
)
public  isMergeNode  = (
	^ parentVersions size > 1
)
public isParentOf: aVersion  = (
	^ hasChildVersionWithId: aVersion versionId.
)
public principalId = (
	^ initialVersion principalId.
)
public printOn: aStream = (
	aStream nextPutAll: 'Version '.
	aStream nextPutAll: versionId asString.
)
public registerChild: aVersion = (
	childVersions add: aVersion.
)
public singleParentVersion = (
	assertSingleParent.
	^ parentVersions  anyOne.
)
public singleParentVersionId  = (
	^ singleParentVersion versionId 
)
public uniqueId = (
	^ CompoundVersionId principal:  principalId versionId: versionId.
)
public versionType = (
	^ initialVersion versionType.
)
public versionsUpTo: anotherVersion = (
	assertSingleParent.

	^ (self = anotherVersion) 
					ifTrue: [ { self } ]
					ifFalse: [   (singleParentVersion versionsUpTo: anotherVersion) , { self }  ]  

)
public withAllAncestors = (
	| ancestors |
	ancestors:: Set withAll: allAncestors.
	ancestors add: self.
	^ ancestors.
)
) : (
public withParent: aParent = (
	^ self withParents: { aParent }
)
)
public class VersionsServer = (
|

	storesById = Map new.
	idGenerator = IdGenerator seed: 0 nextIdBlock: [:x | x + 1]. 
|
) (
public containsStoreNamed: aName  = (
	^ storesById values anySatisfy: [:each | each name = aName].
)
public createStoreNamed: aName  root: aRootObject = (
	| newStore |
	newStore:: Store name: aName identifiedBy: idGenerator newId root: aRootObject. 
	storesById at: newStore id put: newStore. 
	^ newStore.
)
public storeIdentifiedBy: anId  = (
	^ storesById at: anId.
)
public storesCount  = (
	^ storesById size.
)
) : (
)
ClientUpdater = (
	^ clientModule ClientUpdater
)
ObjectChangeRecord = (
	^ clientServerModule ObjectChangeRecord. 
)
ObjectReference = (
	^ clientServerModule ObjectReference. 
)
ObjectsMaterializer = (
	^ clientModule ObjectsMaterializer
)
RegularObjectChange = (
	^ clientServerModule RegularObjectChange. 
)
ServerToClientChangeLog = (
	^ clientServerModule ServerToClientChangeLog
)
newMapFrom: aMap = (
	^ clientServerModule newMapFrom: aMap.

)
) : (
)
