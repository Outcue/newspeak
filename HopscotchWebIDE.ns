Newspeak3
'Samples'
class HopscotchWebIDE packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	private Browsing = manifest SimpleBrowsing.
	private Minitest = manifest Minitest.
	private MinitestUI = manifest MinitestUI.
	private Namespacing = manifest NamespacingForV8.
	private NewspeakColorization = manifest NewspeakColorization2.
	private WorkspaceManager = manifest WorkspaceManagerForV8.
	|
) (
class HopscotchImages with: x = (
	|
	public publicAccessImage = x.
	public protectedAccessImage =  x.
	public privateAccessImage = x.
	public addImage = x.
	public addOutImage =  x.
	public addOverImage = x.
	public dropDownImage = x.
	public dropDownOutImage = x.
	public dropDownOverImage =  x.
	public expandImage =  x.
	public expandOverImage = x.
	public expandDownImage = x.
	public collapseImage = x.
	public collapseOverImage = x.
	public collapseDownImage = x.
	public homeImage = x.
	public homeOverImage = x.
	public homeOutImage = x.
	public homeDownImage = x.
	public classPresenterIcon = x.
	public classUnknownIcon = x.
	public classIcon = x.
|) (
) : (
)
class HopscotchWebIDE usingPlatform: p = (
	|
	public images = HopscotchImages with: (p js global at: 'Image') new.
	public browsing <SimpleBrowsing> = Browsing usingPlatform: p ide: self.
	public namespacing <NamespacingForV8> = Namespacing usingPlatform: p.
	public theWorkspaceManager <WorkspaceManagerForV8> = WorkspaceManager usingPlatform: p ide: self.
	public minitest <Minitest> = Minitest usingPlatform: p.
	public minitestUI <MinitestUI> (*= MinitestUI usingPlatform: p minitest: minitest ide: self.*)
	public colorizer <NewspeakColorization> (*= (NewspeakColorization usingPlatform: p) NS3BrowserColorizer new.*)
	|
	populateNamespaceUsingPlatform: p.
) (
populateIconNamespace: ns <HopscotchImages> ^ <Namespace> = (
	^ns
		at: 'publicAccessImage' put: images publicAccessImage;
		at: 'protectedAccessImage' put: images protectedAccessImage;
		at: 'privateAccessImage' put: images privateAccessImage;
		at: 'addImage' put: images addImage;
		at: 'addOutImage' put: images addOutImage;
		at: 'addOverImage' put: images addOverImage;
		at: 'dropDownImage' put: images dropDownImage;
		at: 'dropDownOutImage' put: images dropDownOutImage;
		at: 'dropDownOverImage' put: images dropDownOverImage;
		at: 'expandImage' put: images expandImage;
		at: 'expandOverImage' put: images expandOverImage;
		at: 'expandDownImage' put: images expandDownImage;
		at: 'collapseImage' put: images collapseImage;
		at: 'collapseOverImage' put: images collapseOverImage;
		at: 'collapseDownImage' put: images collapseDownImage;
		at: 'classPresenterIcon' put: images classPresenterIcon;
		at: 'classUnknownIcon' put: images classUnknownIcon;
		at: 'classIcon' put: images classIcon;
		yourself
)
populateNamespaceUsingPlatform: p <Platform> ^ <Namespace> = (
	|
	platformMirror <ObjectMirror> = p mirrors ObjectMirror reflecting: p.
	platformClass <ClassMirror> = platformMirror getClass.
	runtimeMirror<objectMirror> = platformClass enclosingObject.
	runtimeClass <ClassMirror> = topLevelClassOf: platformMirror.
	namespace <Namespace> = namespacing Root.
	|
	namespace
		at: 'Icons' put: (populateIconNamespace: namespacing freshNamespace);
		at: runtimeClass mixin name put: runtimeClass reflectee;
		at: 'SimpleBrowsing' put: Browsing;
		at: 'Minitest' put: Minitest;
		at: 'MinitestUI' put: MinitestUI;
		at: 'NamespacingForV8' put: Namespacing;
		at: 'NewspeakColorization2' put: NewspeakColorization;
		at: 'HopscotchWebIDE' put: outer HopscotchWebIDE class;
		at: 'WorkspaceManagerForV8' put: WorkspaceManager.

	runtimeClass slots do:
		[:s <SlotMirror> | | klass <ClassMIrror> o <Object> |
		o:: (runtimeMirror getSlot: s name) reflectee.
		o isKindOfBehavior ifTrue:
			[namespace at: o simpleName put: o]].

	^namespace
)
topLevelClassOf: om <ObjectMirror> ^ <ClassMirror> = (
	| klass <ClassMirror> ::= om getClass. |
	[klass enclosingObject reflectee isNil] whileFalse: [klass:: klass enclosingObject getClass].
	^klass
)
) : (
)
public ideUsingPlatform: p = (
	^HopscotchWebIDE usingPlatform: p
)
public main: platform <Platform> args: args <Tuple[String]> = (
	| hopscotchPlatform ide |
	hopscotchPlatform:: hopscotchRuntime using: platform.
	ide:: ideUsingPlatform: hopscotchPlatform.
	hopscotchPlatform hopscotch core HopscotchWindow openSubject: ide browsing HomeSubject new.
)
) : (
)
