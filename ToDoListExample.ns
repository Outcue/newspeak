Newspeak3
'OrthogonalSynchronization'
public class ToDoListExample usingPlatform: platform  = (
|
	Presenter =  platform hopscotch core Presenter.
	Subject  =  platform hopscotch core Subject.
	List = platform collections List.
	HopscotchWindow = platform hopscotch core HopscotchWindow.
	model = ToDoListModel new.
|
) (
class ToDoListModel = (
|
	tasks_slot = List new.
|
) (
public class ToDoTask withDescription: aDescription  = (
|
	public description::= aDescription.
|
) (
) : (
)
public add: aTask = (
	tasks_slot add: aTask.
)
public remove: aTask = (
	tasks_slot remove: aTask.
)
public tasks = (
	^List withAll: tasks_slot.
)
) : (
)
public class ToDoListPresenter onSubject: s  = Presenter onSubject: s (
|
	content
|
) (
definition  = (
	content:: list.
	refreshTasks.
	^ column: {
		link: 'New task' action: [respondToAdd] . 
		content 
	}. 

)
definitionForTasks = (
	^ subject subjectElements collect: [:each | each createPresenter]
)
public refreshTasks = (
	content presenters: definitionForTasks.
)
respondToAdd = (
	subject newTaskWithDescription: 'This is a new task '. 
	refreshTasks.
)
) : (
)
public class ToDoListSubject onModel: m  = Subject onModel: m  (
|
	counter::= 1.
|
) (
public createPresenter = (
	^ ToDoListPresenter onSubject: self.
)
public newTaskWithDescription: taskDescription = (
	
	model add: (model ToDoTask withDescription: taskDescription , ' ', counter asString).
	counter:: counter + 1.
)
public removeTask: task  = (
	model remove: task.
)
public subjectElements = (
	
	^model tasks collect: [:each |  ToDoSubject onModel: each parentSubject: self ].
)
) : (
)
class ToDoPresenter onSubject: s = Presenter onSubject: s (

) (
definition = (
	^ row: {
				label: subject taskDescription.
				blank: 3. 
				link: 'Remove'  action: [respondToRemove]
	}

)
respondToRemove = (
	subject remove.
	sendUp refreshTasks.
)
) : (
)
public class ToDoSubject onModel:  m parentSubject: aSubject = Subject onModel: m (
|
	parentSubject = aSubject.
|
) (
public createPresenter = (
	^ToDoPresenter onSubject: self.
)
public remove = (
	parentSubject removeTask: self model.
)
public task = (
	^ model
)
public taskDescription = (
	^ self model description
)
) : (
)
public start = (

	 HopscotchWindow openSubject:  (ToDoListSubject onModel: model) 
)
) : (
)
