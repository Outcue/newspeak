Newspeak3
'Root'
class DeploymentManager usingPlatform: p <HopscotchPlatform> ide: ide <HopscotchWebIDE> = (
(*
This class manages deployment of Newspeak applications from the IDE.
It maintains a set of Newspeak platform configurations. Configurations can vary 
depending on the capabilities a deployed application requires. For example, an 
application may or may not need the hopscotch UI, or mirrors for reflection, 
or access to local functionality via node etc. A DeploymentConfiguration describes 
a particular set of required capabilities.

Every configuration is based upon a base platform, which currently is either
primordial soup or javascript. This base is then extended with specific capabilities
as described above.

A customized platform class is produced based on a given deployment configuration.
Platform classes are created dynamically from source. The source is composed
dynamically from snippets describing the various platform capabilities.

We keep the set of existing configurations in the slot knownConfigurations.
This set may be extended or restricted via the UI. 
*)
	|
    (* imports *)
    private StringBuilder = p kernel StringBuilder.
    private List = p collections List.
    private Map = p collections Map.
    private Subject = p hopscotch Subject.
	private ProgammingPresenter = ide browsing ProgrammingPresenter.
    private ClassDeclarationBuilder = p mirrors ClassDeclarationBuilder.
    
    (* module variables *)
    knownConfigurations <List[DeploymentConfiguration]> = List new.

	|
) (
class DeploymentConfiguration = (
	|
    public base <Symbol> ::= #Psoup.
    public hasHopscotch <Boolean> ::= false.
    public hasMirrors <Boolean> ::= false.
    public hasNode <Boolean> ::= false.
    public hasElectron <Boolean> ::= false.
    public hasZircon <Boolean> ::= false.
    public runtime <ClassDeclarationMirror>
	|
) (
) : (
)
public class DeploymentConfigurationSubject onModel: dc <DeploymentConfiguration> = Subject onModel: dc (
) (
public createPresenter ^ <DeploymentConfigurationPresenter> = (
  ^DeploymentConfigurationPresenter onSubject: self
)
jsPrefix ^ <String> = (
  ^'class RuntimeForV8 packageUsing: manifest = (
(* Provides the platform object for Newspeak on Javascript.

Copyright 2012 Google Inc.
Copyright 2013 Ryan Macnak

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
|
	Kernel = manifest KernelForV8.
	Actors = manifest ActorsForV8.
	Aliens = manifest AliensForV8.
	Collections = manifest Collections.
	Mirrors = manifest MirrorsForV8.
	public MirrorGroups = manifest MirrorGroups.
	Streams = manifest Streams.
    '
)
psoupPrefix ^ <String> = (
  ^'class RuntimeForPrimordialSoup packageRuntimeUsing: manifest = (|
private Kernel = manifest Kernel.
public InternalKernel = manifest KernelForPrimordialSoup.
private Collections = manifest CollectionsForPrimordialSoup.
private Actors = manifest ActorsForPrimordialSoup.
private PrimordialFuel = manifest PrimordialFuel.
private JS = manifest JSForPrimordialSoup.
'
)
jsPlatformFactoryPrefix ^ <String> = (
  ^'public class Platform usingVmMirror: vmmirror = (
	|
	public kernel = Object enclosingObject. (* Instantiated specially to avoid bootstrapping issues. *)
	public actors = Future computing: [Actors usingPlatform: self].
	public js = Future computing: [Aliens usingPlatform: self].
	public collections = Future computing: [Collections usingPlatform: self].
	public streams = Future computing: [Streams usingPlatform: self].
	public operatingSystem = #web.
    '
)
psoupPlatformFactoryPrefix ^ <String> = (
  ^'public class Platform internalKernel: ik = (|
public kernel = Kernel wrapping: ik.
public collections = Collections usingInternalKernel: ik.
public victoryFuel = PrimordialFuel usingPlatform: self internalKernel: ik.
public actors = Actors usingPlatform: self.
public js = JS usingPlatform: self.
'
)
public config ^ <DeploymentConfiguration> = (
  ^model
)
public addZircon ^ <Boolean> = (
  ^config hasZircon: true
)
public addHopscotch ^ <Boolean> = (
  ^config hasHopscotch: true
)
public addMirrors ^ <Boolean> = (
  ^config hasMirrors: true
)
public addElectron ^ <Boolean> = (
  ^config hasElectron: true
)
public addNode ^ <Boolean> = (
  ^config hasNode: true
)
public runtime ^ <ClassDeclarationMirror> = (
  ^(ClassDeclarationBuilder fromSource: source) install
)
public saveConfiguration = (
  knownConfigurations 
    detect: [:c  <DeploymentConfiguration> | d = config]
    ifNone: [knownConfigurations add: config]
)
addIsKindOfMethodsTo: src <StringBuilder> = (
  src add: 'public isKindOfPlatform ^ <Boolean> =  (^true)
  '.
  src add: 'public isKindOf'.
  src add: config base.
  src add: 'Platform ^ <Boolean> =  (^true)
  '.  
  hasHopscotch  ifTrue: [src add: 'public isKindOfPlatformWithHopscotch ^ <Boolean> =  (^true)
  '].
  hasMirrors  ifTrue: [src add: 'public isKindOfPlatformWithMirrors ^ <Boolean> =  (^true)
  '].
  hasNode ifTrue: [src add: 'public isKindOfPlatformWithNode ^ <Boolean> =  (^true)
  '].
  hasElectron ifTrue: [src add: 'public isKindOfPlatformWithElectron ^ <Boolean> =  (^true)
  '].
  hasZircon ifTrue: [src add: 'public isKindOfPlatformWithZircon ^ <Boolean> =  (^true)
  '].
)
public source ^ <String> = (
  (* compute the source code for runtime class that matches this configuration *)
  | src <StringBuilder> = StringBuilder new: 2500. |
  src add: basePrefix.
  hasHopscotch  ifTrue: [src add: '  private Graphics = manifest GraphicsForHTML5.
 	private TextModule = manifest TextModule.
 	private Hopscotch = manifest HopscotchForHTML5.
     '].
  hasMirrors  ifTrue: [src add: 'private Mirrors = manifest MirrorsForPrimordialSoup.'].
  hasNode ifTrue: [].
  hasElectron ifTrue: [].
  hasZircon ifTrue: [src add: 'private Zircon = manifest Zircon.'].
  src add: '
  |
) (
'.
  src add: basePlatformFactoryPrefix.
  hasHopscotch  ifTrue: [src add: '	public graphics = Graphics usingPlatform: self.
	public text = TextModule usingPlatform: self.
	public hopscotch = Hopscotch usingPlatform: self images: images..
    '].
  hasMirrors  ifTrue: [
    base = #primordialsoup 
      ifTrue: [src add: 'public mirrors = Mirrors usingPlatform: self internalKernel: ik namespace: outer RuntimeWithMirrorsForPrimordialSoup.']
      ifFalse: [src add: 'public mirrors = Future computing: [Mirrors usingPlatform: self runtime: outer RuntimeForV8 vmMirror: vmmirror].']
      ].
  hasNode ifTrue: [].
  hasElectron ifTrue: [].
  hasZircon ifTrue: [
    assert: [base = #primordialsoup] message:  'Cannot combine Zircon and Javascript base platform'.
    src add: 'public zircon =  Zircon usingPlatform: self.'
  ].
    src add: '
  |
) (
'.
  addIsKindOfMethodsTo: src.
  src add: baseSuffix. 
  ^src asString
)
basePlatformFactoryPrefix ^ <String> = (
  config base = #Psoup ifTrue: [^psoupPlatformFactoryPrefix].
  ^jsPlatformFactoryPrefix
)
basePrefix ^ <String> = (
  config base = #Psoup ifTrue: [^psoupPrefix].
  ^jsPrefix
)
public setBase: base = (
  config base: base.
  base = #Javascript ifTrue: [config hasZircon: false].
)
) : (
)
class DeploymentConfigurationPresenter onSubject: s <DeploymentConfigurationSubject> = ProgrammingPresenter onSubject: s (
) (
definition ^ <Fragment> = (
  ^column: {
        label: subject config base.
        subject config base= #Psoup ifTrue: [
          button: 'Switch to Javascript' action: [updateGUI: [subject setBase: #Javascript]]
          ] ifFalse: [
            button: 'Switch to Psoup' action: [updateGUI: [subject setBase: #Psoup]]
          ].
        subject config hasHopscotch ifTrue: [
          button: 'Remove Hopscotch support' action: [updateGUI: [subject config hasHopscotch: false]].
          ] ifFalse: [
            button: 'Add Hopscotch support' action: [updateGUI: [subject config hasHopscotch: true]].
          ].
        subject config hasMirrors ifTrue: [
          button: 'Remove Mirror support' action: [updateGUI: [subject config hasMirrors: false]].
          ] ifFalse: [
            button: 'Add Mirror support' action: [updateGUI: [subject config hasMirros: true]].
          ].
        subject config hasNode ifTrue: [
          button: 'Remove Node support' action: [updateGUI: [subject config hasNode: false]].
          ] ifFalse: [
            button: 'Add Node support' action: [updateGUI: [subject config hasNode: true]].
          ]. 
        subject config hasElectron ifTrue: [
          button: 'Remove Electron support' action: [updateGUI: [subject config hasElectron: false]].
          ] ifFalse: [
            button: 'Add Electron support' action: [updateGUI: [subject config hasElectron: true]].
          ]. 
  subject config base= #psoup ifTrue: [
        subject config hasZircon ifTrue: [
          button: 'Remove Zircon support' action: [updateGUI: [subject config hasZircon: false]].
          ] ifFalse: [
            button: 'Add Zircon support' action: [updateGUI: [subject config hasZircon: true]].
          ].     
  ].
  button: 'Save' action: [].
  }
)
) : (
)
) : (
)
