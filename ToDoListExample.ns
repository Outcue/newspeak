Newspeak3
'OrthogonalSynchronization'
public class ToDoListExample usingPlatform: platform  = (
|
	Presenter =  platform hopscotch core Presenter.
	Subject  =  platform hopscotch core Subject.
	List = platform collections List.
	HopscotchWindow = platform hopscotch core HopscotchWindow.
	model = ToDoListModel new.
|
) (
class ToDoListModel = (
|
	pendingTasks_slot = List new.
	doneTasks_slot = List new.
	
|
) (
public class ToDoTask withDescription: aDescription  = (
|
	public description::= aDescription.
|
) (
) : (
)
public add: aTask = (
	pendingTasks_slot add: aTask.
)
public doneTasks = (
	^List withAll: doneTasks_slot.
)
public isDone: aTask = (
	^doneTasks_slot includes: aTask.
)
public isPending: aTask = (
	^pendingTasks_slot includes: aTask.
)
public markAsDone: aTask = (
	pendingTasks_slot remove: aTask.
	doneTasks_slot add: aTask.
)
public markAsPending: aTask = (
	doneTasks_slot remove: aTask.
	pendingTasks_slot add: aTask.
)
public pendingTasks = (
	^List withAll: pendingTasks_slot.
)
public remove: aTask = (
	pendingTasks_slot remove: aTask ifAbsent: [].
	doneTasks_slot remove: aTask ifAbsent: [].
	
)
) : (
)
public class ToDoListPresenter onSubject: s  = Presenter onSubject: s (
|
	content
|
) (
definition  = (
	content:: list.
	refreshTasks.
	^ column: {
		link: 'New task' action: [respondToAdd] . 
		content 
	}. 

)
definitionForTasks = (
	^ subject pendingSubjectElements collect: [:each | each createPresenter]
)
public refreshTasks = (
	content presenters: definitionForTasks.
)
respondToAdd = (
	subject newTaskWithDescription: 'This is a new task '. 
	refreshTasks.
)
) : (
)
public class ToDoListSubject onModel: m  = Subject onModel: m  (
|
	counter::= 1.
|
) (
public actionsFor: aTask do:  block = (
	
	(model isPending: aTask) ifTrue: [
		block value: 'Done!' value: [ model markAsDone: aTask   ].			
	].

	(model isDone: aTask) ifTrue: [
		block value: 'Back to Pending' value: [ model markAsPending: aTask   ].
	].
	
	block value: 'Remove' value: [  removeTask: aTask].

)
public createPresenter = (
	^ ToDoListPresenter onSubject: self.
)
public doneSubjectElements = (
	
	^model doneTasks collect: [:each |  ToDoSubject onModel: each parentSubject: self ].
)
public newTaskWithDescription: taskDescription = (
	
	model add: (model ToDoTask withDescription: taskDescription , ' ', counter asString).
	counter:: counter + 1.
)
public pendingSubjectElements = (

	^model pendingTasks collect: [:each |  ToDoSubject onModel: each parentSubject: self ].
)
public removeTask: task  = (
	model remove: task.
)
) : (
)
class ToDoPresenter onSubject: s = Presenter onSubject: s (

) (
availableActions = (
	| result = List new. |
	subject actionsDo: [ :actionName :action |
		result add:  (linkFor: actionName action: action).
		
	] .

	^result
	
)
definition = (

	
	^ row: ({
				label: subject taskDescription.
				blank: 3. 
				
	}, availableActions).

)
linkFor: name action: anAction = (

	^link: name action: [ anAction value. 
						sendUp refreshTasks.  ].

)
) : (
)
public class ToDoSubject onModel:  m parentSubject: aSubject = Subject onModel: m (
|
	parentSubject = aSubject.
|
) (
public actionsDo: aBlock = (
	parentSubject actionsFor: self model do: aBlock.
)
public createPresenter = (
	^ToDoPresenter onSubject: self.
)
public remove = (
	parentSubject removeTask: self model.
)
public task = (
	^ model
)
public taskDescription = (
	^ self model description
)
) : (
)
public start = (

	 HopscotchWindow openSubject:  (ToDoListSubject onModel: model) 
)
) : (
)
