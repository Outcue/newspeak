Newspeak3
'Samples'
class HopscotchDemo packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	private findImage = manifest findImage.
	private peekingEye = manifest peekingeye1610.
	|
) (
class Demo usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Color = p graphics Color.
	Point = p graphics Point.
	Stopwatch = p kernel Stopwatch.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
|) (
class DemoPresenter onSubject: s = Presenter onSubject: s (| counter ::= 0. |) (
public definition = (
	| 
    echo <TextDisplayFragment>
    slowHolder <HolderComposer>    
    |
	^row: {
        (column: {
            button: 'Buttons' action: [].
            button: 'Gestures' action: [].
            button: 'Menus' action: [].
            button: 'Text' action: [].

        })
            color: (Color gray: 0.92).
        (column: {
            label: 'Text'.
            rectangle
                fill: Color blue;
                frame: 100 height: 100;
                border: Color red.
            rectangle
                fill: Color green;
                frame: 100 height: 100;
                border: Color yellow width: 3.
        })
            color: (Color gray: 0.5)
    }
)
fib: n = (
	^n < 2 ifTrue: [1] ifFalse: [(fib: n - 1) + (fib: n - 2)]
)
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfDemoPresenter
)
sampleMenu ^ <DropDownMenuFragment> = (
	^dropDownMenu: [{
        {
            counter printString. 
            [counter:: counter + 1. alert: counter]
        }. 
        {
            'one'. 
            [alert: '1']
        }. 
        {
            'two'. 
            [alert: '2']
        }. 
        #separator. 
        {
            'three'. 
            [alert: '3']
        }. 
        {
            subject elapsedMilliseconds printString. 
            [alert: 'Dynamic!']
        } 
    }]
)
slow = (
	^initially:
		(label: 'Doing something slow...')
	deferred: [
		slowFib.
		row: {
			label: 'Done!'.
			mediumBlank.
			(image: findImage)
                height: 30.
        }
        ].
)
slowFib = (
	| stopwatch = Stopwatch new start. |
	[ fib: 20.
	  stopwatch elapsedMilliseconds < 1000] whileTrue.
)
) : (
)
public class DemoSubject new = Subject onModel: nil (
    | stopwatch = Stopwatch new. |
    stopwatch start) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
isMyKind: other ^ <Boolean> = (
    ^other isKindOfDemoPresenter
)
public elapsedMilliseconds = (
	^stopwatch elapsedMilliseconds
)
) : (
)
) : (
)
public main: platform args: args = (
	| hopscotchPlatform demo |
	hopscotchPlatform:: hopscotchRuntime using: platform.
	demo:: Demo usingPlatform: hopscotchPlatform.
	hopscotchPlatform hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)
) : (
)
