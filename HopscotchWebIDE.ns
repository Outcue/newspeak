Newspeak3
'Root'
class HopscotchWebIDE usingPlatform: p = (
	|
	public Map = p collections Map.
	public images = imagesOuter.
	public browsing = Browsing usingPlatform: p ide: self.
	public debugging = Debugging usingPlatform: p ide: self.
	public namespacing = Namespacing usingPlatform: p.
	public theWorkspaceManager = WorkspaceManager usingPlatform: p ide: self.
	public minitest = Minitest usingPlatform: p.
	public minitestUI = MinitestUI usingPlatform: p minitest: minitest ide: self.
	public parserLib = CombinatorialParsing usingPlatform: p.
	public grammar = NewspeakGrammar usingPlatform: p parsers: parserLib.
	public colorizer = (NewspeakColorization usingPlatform: p grammar: grammar) NS3BrowserColorizer new.
	public webFiles = WebFiles usingPlatform: p.
	public json = JSON usingPlatform: p.
	public deployment
	public psoupDeploymentRuntime = RuntimeForPrimordialSoup.
	public psoupWithMirrorsDeploymentRuntime = RuntimeWithMirrorsForPrimordialSoup.
        public localStorage = (p js global at: 'window') at: 'localStorage'.
	public atomicInstaller = p mirrors installer.
        |
	populateNamespaceUsingPlatform: p.
	deployment:: DeploymentManager usingPlatform: p ide: self.
) (
populateIconNamespace: ns <Namespace> ^ <Namespace> = (
	^ns
    	at: 'accept16px' put:  images accept16px;
	    at: 'cancel16px' put: images cancel16px;
	    at: 'disclosureClosedImage' put: images disclosureClosedImage;
	    at: 'disclosureOpenImage' put: images disclosureOpenImage;
		at: 'downloadImage' put: images downloadImage;
		at: 'publicImage' put: images publicAccessImage;
		at: 'protectedImage' put: images protectedAccessImage;
		at: 'privateImage' put: images privateAccessImage;
		at: 'hsAddImage' put: images addImage;
		at: 'hsBackImage' put: images backImage;
		at: 'hsDropdownImage' put: images dropDownImage;
		at: 'hsExpandImage' put: images expandImage;
		at: 'hsCollapseImage' put: images collapseImage;
		at: 'classPresenterImage' put: images classPresenterIcon;
		at: 'classUnknownImage' put: images classUnknownIcon;
		at: 'hsForwardImage' put: images forwardImage;
		at: 'languageNewspeak3' put: images classIcon;
		at: 'itemReferencesImage' put: images itemReferencesImage;
		at: 'hsHistoryImage' put: images historyImage;		
		at: 'hsHomeImage' put: images homeImage;
		at: 'hsNewImage' put: images newImage;		
		at: 'hsRefreshImage' put: images refreshImage;
        at: 'findImage' put: images findImage;
        at: 'peekingeye1610' put: images peekingeye1610;
		yourself
)
public launch: s <Subject> inWindow: w <HopscotchShell class> = (
  browsing launch: s inWindow: w
)
public launch: s <Subject> = (
  browsing launch: s inWindow: browsing IDEWindow
)
populateNamespaceUsingPlatform: p <Platform> ^ <Namespace> = (
	|
	platformMirror <ObjectMirror> = p mirrors ObjectMirror reflecting: p.
	platformClass <ClassMirror> = platformMirror getClass.
	runtimeMirror<ObjectMirror> = platformClass enclosingObject.
	runtimeClass <ClassMirror> = topLevelClassOf: platformMirror.
	namespace <Namespace> = namespacing Root.
	|
	namespace
		at: 'Icons' put: (populateIconNamespace: namespacing freshNamespace);
		at: runtimeClass mixin name put: runtimeClass reflectee;
		at: 'Browsing' put: Browsing;
		at: 'Minitest' put: Minitest;
		at: 'MinitestUI' put: MinitestUI;
		at: 'Namespacing' put: Namespacing;
		at: 'NewspeakColorization' put: NewspeakColorization;
		at: 'HopscotchWebIDE' put: (topLevelClassOf: (p mirrors ObjectMirror reflecting: self)) reflectee;
		at: 'CombinatorialParsing' put: CombinatorialParsing;
		at: 'NewspeakGrammar' put: NewspeakGrammar;
		at: 'NewspeakASTs' put: NewspeakASTs;
		at: 'NewspeakParsing' put: NewspeakParsing;
		at: 'Debugging' put: Debugging;
		at: 'WorkspaceManager' put: WorkspaceManager;
		at: 'DeploymentManager' put: DeploymentManager;		
		at: 'RuntimeForPrimordialSoup' put: RuntimeForPrimordialSoup;
		at: 'RuntimeWithMirrorsForPrimordialSoup' put: RuntimeWithMirrorsForPrimordialSoup;
		at: 'RuntimeForElectron' put: RuntimeForElectron;		
		at: 'RuntimeForV8' put: RuntimeForV8;
		at: 'RuntimeForV8WithMirrorBuilders' put: RuntimeForV8WithMirrorBuilders;
		at: 'NewspeakCompilation' put: NewspeakCompilation;
        at: 'JavascriptGeneration' put: JavascriptGeneration;
        at: 'Newspeak2V8Compilation' put: Newspeak2V8Compilation;
        at: 'KernelForV8' put: KernelForV8;
        at: 'ActorsForV8' put: ActorsForV8;	
        at: 'AliensForV8' put: AliensForV8;
        at: 'MirrorsForV8' put: MirrorsForV8;
        at: 'MirrorGroups' put: MirrorGroups;	
        at: 'Collections' put: Collections;
        at: 'Streams' put: Streams;
	at: 'WebFiles' put: WebFiles.
		
	testModules do: [:testModule | namespace at: testModule name put: testModule].

	augmentIDE: self withPlatform: p.

	^namespace
)
public lastBackupTime ^ <Integer> = (
  ^Integer parse: (localStorage getItem: #lastBackupTime) radix: 10
)
public lastSavedTime ^ <Integer> = (
  ^Integer parse: (localStorage getItem: #lastSavedTime) radix: 10
)
backup ^ <Map[Symbol, String]> = (
  ^[json decode: (localStorage getItem: #backup)] on: Error do: [:e | Map new].
)
public installFromBuilders: bs <Array[ClassDeclarationBuilder]> = (
(* A centralized method for installing new code from the IDE *)
  | lastBackup <Map[Symbol, String]> = backup. |
  (* Install the code *)
  atomicInstaller install: bs into: namespacing Root.
  (* Backup the changes *)
  bs do: [:b <ClassDeclarationBuilder> | 
    (* Add each changed module to the backup *)
    lastBackup at: b name put: (browsing compilationUnitFromSource: b source)
  ].
  (* Save new backup in local storage *)
  localStorage setItem: #backup to: (json encode: lastBackup).
  (* Timestamp latest backup *)
  localStorage setItem: #lastBackupTime to: Date new getTime.
)
) : (
)
