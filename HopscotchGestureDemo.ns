Newspeak3
'Samples'
class HopscotchGestureDemo packageUsing: manifest = (
	|
	private hopscotchRuntime = manifest HopscotchForHTML5Runtime packageUsing: manifest.
	|
) (
class Demo usingPlatform: p = (|
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	Color = p graphics Color.	
    private borderWidth <Float> ::= 1.0. 
|) (
class DemoPresenter onSubject: s = Presenter onSubject: s (
) (
public definition = (
	^row: {
        (column: {
            button: 'Gestures' action: [].
            slider: borderWidth 
                    min: 0 
                    max: 100 
                    action: [:value |                         
                        updateGUI: [ borderWidth:: value ]
                    ].
        })
            color: (Color gray: 0.92).
        
        (column: {
            rectangle
                fill: Color green;
                frame: 300 height: 300;
                border: Color yellow width: borderWidth;
                onClick: [:event | 
                    'onClick' out.
                ];
                onMouseDown: [:event | 
                    'onMouseDown' out.
                ];
                onMouseUp: [:event | 
                    'onMouseUp' out.
                ];
                onMouseEnter: [:event | 
                    'onMouseEnter' out.
                ];
                onMouseMove: [:event | 
                    'onMouseMove' out.
                ];
                onMouseOut: [:event | 
                    'onMouseOut' out.
                ];
                onWheel: [:event | 
                    'onWheel' out.
                ];
                onTouchStart: [:event | 
                    'onTouchStart' out.
                ];
                onTouchMove: [:event | 
                    'onTouchMove' out.
                ];
                onTouchEnd: [:event | 
                    'onTouchEnd' out.
                ];
                onTouchCancel: [:event | 
                    'onTouchCancel' out.
                ].
        })
    }
)
public isKindOfDemoPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfDemoPresenter
)
) : (
)
public class DemoSubject new = Subject onModel: nil (
) (
public createPresenter = (
	^DemoPresenter onSubject: self
)
isMyKind: other ^ <Boolean> = (
    ^other isKindOfDemoPresenter
)
) : (
)
) : (
)
public main: platform args: args = (
	| 
    hopscotchPlatform = hopscotchRuntime using: platform.
    demo = Demo usingPlatform: hopscotchPlatform.
    |
	hopscotchPlatform hopscotch core HopscotchWindow openSubject: demo DemoSubject new.
)
) : (
)
