Newspeak3
'Samples'
class AmpleforthEmbedder usingPlatform: p namespace: ns browsing: b = (
(*
Ampleforth is designed to support live literate programming. It supports embedding Newspeak code inside the text of a normal web page. Ampleforth is in its infancy, and currently can be used in conjunction with Madoko to produce such documents.

Ampleforth is the name of a character in 1984 who worked at the Ministry of Truth. His job was to edit Oldspeak text so it would be goodthinkful.

Copyright 2014-2017 Google Inc.
*)
|
	List = p collections List.
	Color = p graphics Color.
	ObjectMirror = p mirrors ObjectMirror.
	ClassMirror = p mirrors ClassMirror.
	Subject = p hopscotch core Subject.
	Presenter = p hopscotch core Presenter.
	TextEditorFragment = p hopscotch fragments TextEditorFragment.
	Gradient = p hopscotch Gradient.
	EmbeddedHopscotchWindow = p hopscotch core EmbeddedHopscotchWindow.

	ObjectSubject = b ObjectSubject.

	namespace = ns.
	browsing = b.
	document = p js global at: 'document'.
	platformMirror = ObjectMirror reflecting: p.
 |namespace at: #AmpleforthEmbedder put: self class) (
class ErrorPresenter onSubject: s = Presenter onSubject: s (
) (
public definition ^ <Fragment> = (
	^label: subject errorMessage
)
public isKindOfErrorPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfErrorPresenter
)
) : (
)
class ErrorSubject onModel: s <String> = Subject onModel: s (
|
	public errorMessage = s.
|) (
public createPresenter ^ <ErrorPresenter> = (
	^ErrorPresenter onSubject: self
)
public resetPresenters = (
 #BOGUS. (* really, this method should do nothing. *)
 super resetPresenters
)
) : (
)
class SnippetPresenter onSubject: s = Presenter onSubject: s () (
definition = (
	| result |
	^column: {
		TextEditorFragment new
			text: subject snippet;
			changeResponse: [:editor | result content: (evaluate: editor textBeingAccepted asString)].
		result:: holder: [deferred: [evaluate: subject snippet]].
	}
)
evaluate: expression <String> ^<Fragment> = (	
	| thread <ThreadMirror> |
	[thread:: platformMirror evaluate: (withoutNbsp: expression)]
		on: Error do: [:e | ^linkForError: e].
	thread isFulfilled ifTrue: [^linkForResult: thread result].
	thread isBroken ifTrue: [^linkForError: thread result].
	^nothing
)
public isKindOfSnippetPresenter ^ <Boolean> = (
  ^true
)
isMyKind: f <Fragment> ^ <Boolean> = (
  ^f isKindOfSnippetPresenter
)
linkForError: exception = (
	^(link: exception printString
	action: [enterSubject: (ObjectSubject onModel: (ObjectMirror reflecting: exception)) fromSnippet: subject])
		color: (Color r: 1 g: 0 b: 0)
)
linkForResult: objectMirror = (
	^link: objectMirror reflectee printString
	action: [enterSubject: (ObjectSubject onModel: objectMirror) fromSnippet: subject]
)
) : (
)
public class SnippetSubject onModel: m = Subject onModel: m () (
createPresenter = (
	^SnippetPresenter onSubject: self
)
public snippet = (
	^model
)
) : (
)
domElementsWithClass: klass <String> do: action <[:Alien[Element]]> = (
	| elements = document getElementsByClassName: klass. |
	0 to: (elements at: 'length') - 1 do:
		[:index | action value: (elements at: index)].
)
evaluateSubject: se <String> ^ <Subject> = (
(* Takes a string representing a unary block and evaluates it with
	browsing as its argument.  The result should be a Subject, which gets
	returned. In other words, the string should contain an expression of type
   [:BrowsingForHTML | Subject]
*)
	| blk |
	blk:: platformMirror
		evaluate: (withoutNbsp: se)
		ifCompilerError: [:e | ^ErrorSubject onModel: 'compile-time error: ', e printString]
		ifError: [:e | ^ErrorSubject onModel: 'runtime error: ', e printString].
		^blk value: browsing
)
populateNamespace = (
 | platformClass <ClassMirror> = topLevelClassOf: platformMirror. |
	namespace at: #SimpleBrowsing put: (ClassMirror reflecting: self Browsing) mixin declaration.
	namespace at: platformClass name put: platformClass.
	platformClass slots do: [:s <SlotMirror> | | klass <ClassMIrror> o <ObjectMirror> |
		o:: platformMirror getSlot: s name.
		klass:: topLevelClassOf: o.
		namespace at: klass name put: klass.
		].
)
public processClassPresenters = (
	domElementsWithClass: 'classPresenter' do: [:element |
		|
		errorBlock =
			[:errorMessage <String> |
			^EmbeddedHopscotchWindow
				into: element
				openSubject: (ErrorSubject onModel: errorMessage)].
		className <String> = element getAttribute: 'className'.
		klass <Class>
		cm <ClassDeclarationMirror>
		|
		klass:: namespace at: className ifAbsent: [nil].
		klass isKindOfBehavior ifFalse: [errorBlock value: className, ' is not a class'].
		(* isKindOfClass should be defined but isn't. *)
		cm:: (ClassMirror reflecting: klass) mixin declaration.
		EmbeddedHopscotchWindow
			into: element
			openSubject: (browsing ClassSubject onModel: cm)
	].
)
public processEvaluators = (
	domElementsWithClass: 'evaluator' do:
		[:element |
		| expression = element getAttribute: 'expression'. |
		EmbeddedHopscotchWindow
			into: element
			openSubject: (SnippetSubject onModel: expression)].
)
public processMinibrowsers = (
	domElementsWithClass: 'minibrowser' do:
		[:element |
		EmbeddedHopscotchWindow
			into: element
			openSubject: browsing HomeSubject new].
)
public start = (
	processEvaluators.
	processMinibrowsers.
	processClassPresenters.
)
topLevelClassOf: om <ObjectMirror> ^ <ClassDeclarationMirror> = (
	| klass ::= om getClass mixin declaration. |
	[klass mixin enclosingClass isNil] whileFalse: [klass:: klass enclosingClass].
	^klass
)
withoutNbsp: string = (
	('a' at: 1) isKindOfInteger
		ifTrue:
			[ | bytes = ByteArray withAll: string. |
			1 to: bytes size do: [:index | (bytes at: index) = 160 ifTrue: [bytes at: index put: 32]].
			^bytes asString]
		ifFalse:
			[ | nonbreakingSpace = String fromRune: 160.
			space = String fromRune: 32. |
			^string replaceAll: nonbreakingSpace with: space]
)
) : (
)
