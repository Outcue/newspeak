Newspeak3
'NS2V8'
class CompilerMirrorsForV8 usingPlatform: p = (
(* Mirrors for NS2Dart compiler.

Copyright 2012 SAP AG.
Copyright 2012 Google Inc.

Licensed under the Apache License, Version 2.0 (the ''License''); you may not use this file except in compliance with the License.  You may obtain a copy of the License at  http://www.apache.org/licenses/LICENSE-2.0 *)
|
	Map = p collections Map.
	List = p collections List.
|) (
class CompiledMixinMirror language: l header: h mirror: llm <LowLevelMixinMirror> = (
(* Represents a compiled (but uninstalled) NS3 class declaration. *)
|
	language <Language> = l.
	header <String> = h.
	lowLevelMirror <LowLevelMixinMirror> = llm.
	factoryName
	commentString
|) (
category ^ <String> = (
	^lowLevelMirror category
)
category: c <String> = (
	lowLevelMirror category: c
)
comment ^ <String> = (
	commentString ifNil: [^''].
	^commentString
)
comment: c <String> = (
	commentString: c
)
isMeta = (
	^lowLevelMirror isMeta
)
methods = (
	^lowLevelMirror methods
)
name ^ <String> = (
	^lowLevelMirror name
)
) : (
)
class ImmutableMirrorGroup group: group = (|
	mirrors = Map new.
|group do: [:each | mirrors at: each simpleName put: each]) (
collect: aBlock = (
	| result |
	result:: List new.
	self do: [:each | result add: (aBlock value: each)].
	^result
)
do: block = (
	mirrors do: block
)
findMirrorNamed: mirrorName = (
	(* The Newspeak version silently fails if the mirror is not present and returns nil. It that actually what we want? *)
	^mirrors at: mirrorName
)
includesMirrorNamed: simpleName = (
	^mirrors includesKey: simpleName
)
includesMirrorSatisfying: block = (
	mirrors do: [:each |
		(block value: each) ifTrue: [^ true]].
	^false
)
) : (
)
class InstanceVariableMirror named: n mutable: m = Mirror (
(* A mirror on an instance variable *)
|
	name <String> = n.
	mutable <Boolean> = m.

	field <Node> (* Dart code *)
	src <String> (* Newspeak source -- optional *)
|) (
public isMutable = (
	^mutable
)
) : (
)
class Mirror = (
(* Common base class for low level mirrors. *)
|
	metadata <MutableMap[Symbol, Object]> = Map new.
|) (
simpleName = (
	^name
)
) : (
)
class MutableMirrorGroup group: group = ImmutableMirrorGroup group: group (
) (
addAllMirrors: mirrorGroup = (
	(* self should not be required. some compiler problem *)
	mirrorGroup do: [:each | addMirror: each]
)
addMirror: mirror = (
	(* self should not be required. some compiler problem *)
	self mirrors at: mirror simpleName put: mirror
)
) : (
)
class SlotMirror named: name source: source isMutable: isMutable = (|
	public name = name.
	public source = source.
	public isMutable = isMutable.
|) (
) : (
)
) : (
)
