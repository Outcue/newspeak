Newspeak3
'OrthogonalSynchronization'
class ClientServerSynchronization usingPlatform: platform  = (
|		
	Map = platform collections Map.
	ObjectMirror = platform mirrors ObjectMirror.
|
) (
public class ArrayChange withChanges: valuesByIndex  = (
|
	public changes = valuesByIndex.
|) (
public applyIn: aContext usingMirror: objectMirror = (
		
	changes keysAndValuesDo: [ :index	 :reference |
		| referencedObject  |
		referencedObject:: reference referencedObjectFrom: aContext.
		objectMirror reflectee at:  index put: referencedObject.
	].
)
public asGlobalReferenceUsing: objectStore = (

	|  changesWithGlobalReference |
	
	changesWithGlobalReference:: Map new.
	changes  keysAndValuesDo: [ :key :value |   changesWithGlobalReference at: key put: (value asGlobalReferenceUsing: objectStore)   ].	
	
	^ class withChanges: changesWithGlobalReference.
)
public asObjectChangeRecordForId: anId = (
	^ ObjectChangeRecord 
		for: (ObjectReference toObjectIdentifiedWith:  anId)
		withChange: self.

)
public isKindOfObjectChange = (
	^ true
)
) : (
)
public class ArrayDefinition  withContents: contents  = (
|
	contents  = contents.
|
) (
public appliedWithChange: aChange = (
	| newContents |
	newContents::  Array withAll: contents. 
	
	aChange changes keysAndValuesDo: [ :k :v  |

		newContents at: k put: v.	
	].

	^ class withContents: newContents.
	
)
public asGlobalReferenceUsing: objectStore = (
	| globalContents|

	globalContents:: contents collect: [  :value |   value asGlobalReferenceUsing: objectStore   ].	
	^ class withContents: globalContents.
)
public createEmptyInstanceUsingClass: aClass  = (
	^ Array new: contents size.
)
public fill: anObjectMirror resolvingReferencesWith: anObjectStore = (
	| array|
	array:: anObjectMirror reflectee.
	
	(1 to: array size) do: [ :index  |
		| elem |
		elem:: (contents at: index).
		 array at: index put: (elem referencedObjectFrom: anObjectStore).
	].

)
public isKindOfArrayDefinition = (
^ true
)
) : (
)
public class ClientToServerChangeLog  withChanges: aChangeRecordsCollection withNewObjects: aNewObjectsCollection = (
|
	public versionId
	public changeRecords = aChangeRecordsCollection.
	public newObjectsDefinitions = aNewObjectsCollection.
	
|
) (
public hasNoChanges = (
	^ changeRecords isEmpty and: [ newObjectsDefinitions isEmpty].
)
public hasNoNewObjectsDefinitions = (
	^ newObjectsDefinitions isEmpty. 
)
) : (
)
public class NewObjectReference toObjectIdentifiedWith: anIdentifier  = (
|
	public identifier = anIdentifier.
|
) (
public asGlobalReferenceUsing: aStore = (
	 ^ ObjectReference toObjectIdentifiedWith: (aStore  guidForLocal: identifier). 
	(* ^ NewObjectReference toObjectIdentifiedWith: (aStore  guidForLocal: identifier).  *)
	
)
public existsReferencedObjectIn: aStore = (
	^ aStore containsNewObjectWithId: identifier
)
public isKindOfNewObjectReference = (
	^ true
)
public referencedObjectFrom: anObjectStore = (

	^ anObjectStore newObjectWithId: identifier.
)
public refersToNil = (
	^ false
)
) : (
)
public class ObjectChangeRecord for: anObjectReference withChange: aChange  = (
|
	public objectReference =anObjectReference.
	public change = aChange.
|) (
public applyChangesIn: aContext usingMirror: objectMirrorClass = (
	| objectToModify objectToModifyMirror |
	objectToModify:: objectReference referencedObjectFrom: aContext.
	objectToModifyMirror:: objectMirrorClass reflecting: objectToModify.
	change applyIn: aContext usingMirror: objectToModifyMirror.
	
)
public asGlobalReferenceUsing: objectStore = (

	^ class 
		for: (objectReference asGlobalReferenceUsing: objectStore) 
		withChange: (change asGlobalReferenceUsing: objectStore).
)
public changes = (
	^ change changes.
)
public isKindOfObjectChangeRecord = (
^ true
)
public refersTo: anObject in: aContext = (
	^ objectReference refersTo: anObject inContext: aContext.
)
) : (
)
public class ObjectDefinition classReference: aClassReference  withContents: contents  = (
|
	public classReference = aClassReference.
	public slotsContents = contents.

|
) (
public appliedWithChange: aChange = (
	| newContents |
	newContents::  newMapFrom: slotsContents. 
	
	aChange change keysAndValuesDo: [ :k :v  |
		newContents at: k put: v.	
	].

	^ class classReference: classReference withContents: newContents.
	
)
public asGlobalReferenceUsing: objectStore = (

	| globalClassReference globalSlotContents  | 
	
	globalClassReference::  classReference asGlobalReferenceUsing: objectStore.
	
	globalSlotContents:: Map new.
	slotsContents keysAndValuesDo: [ :key :value |   globalSlotContents at: key put: (value asGlobalReferenceUsing: objectStore)   ].	
	

	^ class classReference: globalClassReference  withContents: globalSlotContents.
)
public createEmptyInstanceUsingClass: aClass  = (
	
	
	^ aClass  basicNew .
)
public fill: anObjectMirror resolvingReferencesWith: anObjectStore = (
	slotsContents keysAndValuesDo: [ :slotName :reference |
		 anObjectMirror setSlot: slotName to: (reference referencedObjectFrom: anObjectStore).
	].

)
public isKindOfObjectDefinition = (
^ true
)
public slotNamed: aSlotName hasValue: anObject = (
	^ (slotsContents at: aSlotName) refersTo: anObject.
)
) : (
)
public class ObjectDefinitionWithIdentification id: anId definition: aDefinition = (
|
	public id = anId.
	public definition = aDefinition. 
|
) (
) : (
)
public class ObjectReference toObjectIdentifiedWith: anIdentifier = (
|
	public identifier = anIdentifier.
|
) (
public asGlobalReferenceUsing: aStore = (
	 ^  self .  
	(* ^ NewObjectReference toObjectIdentifiedWith: identifier. *)
)
public existsReferencedObjectIn: aStore = (
	^ aStore containsObjectWithGuid: identifier
)
public isKindOfObjectReference = (
	^ true
)
public referencedObjectFrom: anObjectStore = (
	^ anObjectStore objectWithGuid: identifier.
)
public refersTo: anObject  inContext: aContext  = (
	^( aContext isIdentifiable: anObject) and: 
		  [ (aContext isTracked: anObject) and:		
			[identifier = (aContext idForObject: anObject)] ]. 
)
public refersToNil = (
	^ false
)
) : (
)
public class ObjectReferenceByMessageSend receiverReference: aReference selector: aSelector  = (
|
	public receiverReference  = aReference.
	public selector = aSelector.
|
) (
public asGlobalReferenceUsing: aStore = (
	 ^  class receiverReference: (receiverReference asGlobalReferenceUsing: aStore) selector: selector.  
	
)
public existsReferencedObjectIn: aStore = (
	^ receiverReference existsReferencedObjectIn: aStore.
)
public isKindOfObjectReference = (
	^ true
)
public referencedObjectFrom: anObjectStore = (
	| receiver |
	receiver:: receiverReference referencedObjectFrom: anObjectStore.
	^ (ObjectMirror reflecting: receiver) 
					perform: selector with: {}  ifFail: [ error].
)
public referencedObjectFrom: anObjectStore topLevel: topLevelObject  = (
	| receiver |
	receiver:: receiverReference referencedObjectFrom: anObjectStore.
	receiver ifNil: [
		receiver:: topLevelObject.
	].
	^ (ObjectMirror reflecting: receiver) 
					perform: selector with: {}  ifFail: [ error].
)
public refersToNil = (
	^ receiverReference isNil or: [ receiverReference refersToNil].
)
) : (
)
public class RegularObjectChange withChanges: valuesBySlot  = (
|
	public changes = valuesBySlot.
|) (
public appliedWithChange: aChange = (
	| newContents |
	newContents::  newMapFrom: changes. 
	
	aChange changes keysAndValuesDo: [ :k :v  |
		newContents at: k put: v.	
	].

	^ class withChanges: newContents.
	
)
public applyIn: aContext usingMirror: objectMirror  = (
	
	changes keysAndValuesDo: [ :slot :reference |
		| referencedObject  |
		referencedObject:: reference referencedObjectFrom: aContext.
		objectMirror setSlot: slot to: referencedObject.
	].
)
public asGlobalReferenceUsing: objectStore = (

	|  changesWithGlobalReference |
	
	changesWithGlobalReference:: Map new.
	changes  keysAndValuesDo: [ :key :value |   changesWithGlobalReference at: key put: (value asGlobalReferenceUsing: objectStore)   ].	

	^ class withChanges: changesWithGlobalReference.
)
public asObjectChangeRecordForId: anId = (
	^ ObjectChangeRecord 
		for: (ObjectReference toObjectIdentifiedWith:  anId)
		withChange: self.

)
public isKindOfObjectChange = (
	^ true
)
) : (
)
public class ServerToClientChangeLog  mappingIdsWith: idsMap changeRecords: changes newObjects: newObjectsCollection versionId: aVersionId   = (
|
	public localToGlobalIds = idsMap.
	public changeRecords = changes.
	public newObjects = newObjectsCollection.
	public versionId =aVersionId.
	public rootObjectReference
|
) (
) : (
)
public class UnidentifiableObject for: aValue = (
|
	value = aValue.
|
) (
public asGlobalReferenceUsing: aStore = (
	^  self
)
public existsReferencedObjectIn:  aStore  = (
	^ true
)
public referencedObjectFrom: anObjectStore = (
	^ value.
)
public refersTo: anObject = (
	^  value = anObject.
)
public refersTo: anObject inContext: aContext = (
	^refersTo: anObject.
)
public refersToNil = (
	^ refersTo: nil.
)
) : (
)
public classNameFor: anObject = (
	| mirror  |
	mirror:: ObjectMirror reflecting: anObject.
	^ mirror getClass  mixin name

)
public enclosingObjectForClassOf: anObject = (
	| mirror  |
	mirror:: ObjectMirror reflecting: anObject.
	^ mirror getClass enclosingObject reflectee

)
public newMapFrom: aMap = (
	| newMap |
	newMap:: Map new.
	aMap keysAndValuesDo: [ :key :val | newMap at: key put: val ].
	^ newMap
)
) : (
)
